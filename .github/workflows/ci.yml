name: CI - Tests Behave

on:
  push:
    branches: [ "main", "develop", "feature" ]
  pull_request:
    branches: [ "main", "develop", "feature" ]
  # Opcional: ejecutar manualmente
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_migraine_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Install PostgreSQL 15 client to match the service version
        sudo apt-get install -y wget ca-certificates
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql-client-15
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install behave
        pip install behave-django
        pip install python-dateutil
    
    - name: Set environment variables
      env:
        POSTGRES_PASSWORD_SECRET: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_USER_SECRET: ${{ secrets.POSTGRES_USER }}
        POSTGRES_DB_SECRET: ${{ secrets.POSTGRES_DB }}
        SECRET_KEY_SECRET: ${{ secrets.SECRET_KEY }}
      run: |
        echo "DJANGO_SETTINGS_MODULE=migraine_app.settings_ci" >> $GITHUB_ENV
        echo "POSTGRES_DB=${POSTGRES_DB_SECRET:-test_migraine_db}" >> $GITHUB_ENV
        echo "POSTGRES_USER=${POSTGRES_USER_SECRET:-postgres}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SECRET:-postgres}" >> $GITHUB_ENV
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=${SECRET_KEY_SECRET:-test-secret-key-for-ci-very-long-and-secure}" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
    
    - name: Wait for PostgreSQL to be ready
      run: |
        # Use the specific PostgreSQL 15 client
        until /usr/lib/postgresql/15/bin/pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
        # Verify PostgreSQL version
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d test_migraine_db -c "SELECT version();"
    
    - name: Test database connection
      working-directory: ./backend
      run: |
        python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'migraine_app.settings_ci')
        import django
        django.setup()
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute('SELECT 1')
            result = cursor.fetchone()
            print(f'Database connection successful: {result}')
        "
    
    - name: Run Django migrations
      working-directory: ./backend
      run: |
        python manage.py makemigrations --dry-run --verbosity=2
        python manage.py makemigrations
        python manage.py migrate --verbosity=2
    
    - name: Verify Behave setup
      working-directory: ./backend
      run: |
        python -c "
        import os
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'migraine_app.settings_ci')
        import django
        django.setup()
        print('Django setup successful for Behave tests')
        from django.apps import apps
        print(f'Installed apps: {[app.name for app in apps.get_app_configs()]}')
        "
        behave --version
        echo 'Behave setup verification complete'
    
    - name: Run Behave test - Agendamiento Citas
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave agendamiento_citas/features/agendamiento_citas.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Autoevaluación MIDAS
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave evaluacion_diagnostico/features/autoevaluacion_midas.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Bitácora Digital
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave evaluacion_diagnostico/features/bitacora_digital.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Análisis Factores Desencadenantes
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave analiticas/features/analisis_patrones.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Estadísticas Historial
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave analiticas/features/estadisticas_historial.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Aseguramiento Tratamiento
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave tratamiento/features/aseguramiento_tratamiento.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run Behave test - Generación Seguimiento Tratamiento
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave tratamiento/features/generacion_seguimiento_tratamiento.feature --format=progress --no-capture --stop
      continue-on-error: true
    
    - name: Run All Behave tests (consolidated report)
      working-directory: ./backend
      run: |
        python -c "import django; django.setup()" || true
        behave --format=json --outfile=behave_results.json --stop || true
        behave --format=pretty --stop || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: behave-test-results
        path: backend/behave_results.json

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black formatter check
      working-directory: ./backend
      run: |
        black --check .
      continue-on-error: true
    
    - name: Run isort import sorting check
      working-directory: ./backend
      run: |
        isort --check-only .
      continue-on-error: true
    
    - name: Run flake8 linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      continue-on-error: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run frontend tests (if available)
      working-directory: ./frontend
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No frontend tests configured"
        fi
      continue-on-error: true
